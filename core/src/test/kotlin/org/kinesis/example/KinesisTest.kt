/*
 * This source file was generated by the Gradle 'init' task
 */
package org.kinesis.example

import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.runBlocking
import org.junit.jupiter.api.Assertions.assertDoesNotThrow
import org.junit.jupiter.api.Assertions.assertNotNull
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test
import org.kinesis.core.Kinesis
import org.kinesis.core.Task

class KinesisTest {

    private val kinesis = Kinesis

    @Test
    fun `test Kinesis initialization`() {
        assertNotNull(kinesis.coroutineContext)
        assertDoesNotThrow { Kinesis.Default } // Ensure default instance can be created
    }

    @Test
    fun `test register task successfully`() {
        class SimpleTask : Task {
            override val dependencies: Set<Class<out Task>> = emptySet()
            override val dispatcher: CoroutineDispatcher = Dispatchers.Default
            override suspend fun run() {
                // Simple implementation
            }
        }

        val result = kinesis.register(SimpleTask::class.java).onFailure {
            it.printStackTrace()
        }
        assertTrue(result.getOrDefault(false))
    }

    @Test
    fun `test register duplicate task`() {
        class DuplicateTask : Task {
            override val dependencies: Set<Class<out Task>> = emptySet()
            override val dispatcher: CoroutineDispatcher = Dispatchers.Default
            override suspend fun run() {
                // Simple implementation
            }
        }

        // Register the task once
        kinesis.register(DuplicateTask::class.java)

        // Attempt to register again
        val result = kinesis.register(DuplicateTask::class.java)
        assertTrue(result.isFailure)
        assertTrue(result.exceptionOrNull() is IllegalStateException)
    }

    class TaskA : Task {
        override val dependencies: Set<Class<out Task>> by lazy { setOf(TaskB::class.java) }
        override val dispatcher: CoroutineDispatcher = Dispatchers.Default
        override suspend fun run() {}
    }

    class TaskB : Task {
        override val dependencies: Set<Class<out Task>> by lazy { setOf(TaskA::class.java) }
        override val dispatcher: CoroutineDispatcher = Dispatchers.Default
        override suspend fun run() {}
    }

    @Test
    fun `test circular dependency detection`() {
        kinesis.register(TaskB::class.java)
        val result = kinesis.register(TaskA::class.java)
        assertTrue(result.isFailure)
        assertTrue(result.exceptionOrNull() is IllegalStateException)
    }

    companion object {
        var executed = false
        class ExecutableTask : Task {
            override val dependencies: Set<Class<out Task>> = emptySet()
            override val dispatcher: CoroutineDispatcher = Dispatchers.Default
            override suspend fun run() {
                executed = true
            }
        }
    }

    @Test
    fun `test task execution`()  {

        runBlocking {
            kinesis.register(ExecutableTask::class.java).onFailure {
                it.printStackTrace()
            }
            delay(1000) // Allow time for task to execute
        }

        assertTrue(executed)
    }

    @Test
    fun `test task waiting state`() = runBlocking {
        class BaseTask : Task {
            override val dependencies: Set<Class<out Task>> = emptySet()
            override val dispatcher: CoroutineDispatcher = Dispatchers.Default
            override suspend fun run() {}
        }

        class DependentTask : Task {
            override val dependencies: Set<Class<out Task>> = setOf(BaseTask::class.java)
            override val dispatcher: CoroutineDispatcher = Dispatchers.Default
            override suspend fun run() {}
        }

        kinesis.register(DependentTask::class.java)
        delay(100) // Allow tasks to process

        // DependentTask should be in WAITING state until BaseTask is registered
        assertDoesNotThrow { kinesis.register(BaseTask::class.java) }
    }
}
